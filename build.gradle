version = '0.0.1-SNAPSHOT'
group = 'net.weaz'

buildscript {
    ext {
        assertjVersion = '3.7.0'
        commonsIoVersion = '2.5'
        commonsLangVersion = '3.5'
        coverallsPluginVersion = '2.8.1'
        findbugsAnnotationsVersion = '3.0.1'
        gradleVersion = '3.5'
        gradleVersionsPluginVersion = '0.14.0'
        httpclientVersion = '4.5.3'
        logbackVersion = '1.1.7'
        nodePluginVersion = '1.1.0'
        nodeVersion = '7.10.0'
        npmVersion = '4.5.0'
        propdepsPluginVersion = '0.0.7'
        springBootDependencyManagementPluginVersion = '1.0.2.RELEASE'
        springBootVersion = '1.5.3.RELEASE'
        springCloudVersion = 'Dalston.RELEASE'
        springSecurityJwtVersion = '1.0.7.RELEASE'
        springSecurityOauth2Version = '2.1.0.RELEASE'
        springSecurityTestVersion = '4.2.2.RELEASE'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://repo.spring.io/plugins-release' }
    }

    dependencies {
        classpath("com.github.ben-manes:gradle-versions-plugin:${gradleVersionsPluginVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:${nodePluginVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${springBootDependencyManagementPluginVersion}")
        classpath("org.kt3k.gradle.plugin:coveralls-gradle-plugin:${coverallsPluginVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.springframework.build.gradle:propdeps-plugin:${propdepsPluginVersion}")
    }
}

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.moowork.grunt'
apply plugin: 'com.moowork.node'
apply plugin: 'io.spring.dependency-management'

allprojects {
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/libs-release" }
    }
}

node {
    version = project.nodeVersion
    npmVersion = project.npmVersion
    distBaseUrl = 'https://nodejs.org/dist'
    download = true

    workDir = rootProject.file("${project.buildDir}/nodejs/")
    nodeModulesDir = rootProject.file("${project.projectDir}/frontend/")
}

grunt {
    workDir = rootProject.file("./frontend/")
    colors = false
    bufferOutput = false
}

task npmBuild(type: NpmTask,
        group: 'frontend',
        description: 'Builds the frontend assets and puts them in the main application resource directory',
        dependsOn: ['npmInstall', 'npmLint']) {
    args = ['run', 'build', '--silent']
}

task npmLint(type: NpmTask,
        group: 'frontend',
        description: 'Runs linter on the frontend sources.',
        dependsOn: ['npmInstall']) {
    args = ['run', 'lint', '--silent']
}

task npmTest(type: NpmTask,
        group: 'frontend',
        description: 'Runs frontend unit tests.',
        dependsOn: ['npmInstall', 'npmLint']) {
    args = ['run', 'test', '--silent']
}

task gruntE2E(
        type: GruntTask,
        group: 'build',
        description: 'Runs end2end tests while standing up the application.',
        dependsOn: ['npmInstall', ':server-main:assemble', ':server-auth:assemble']) {
    args = ['e2eBuild']
}

dependencyUpdates {
    revision = 'release'
    resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }
}

subprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'pmd'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-eclipse'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-maven'

    dependencyManagement {
        imports {
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        }

        dependencies {
            dependency("ch.qos.logback:logback-classic:${logbackVersion}")
            dependency("ch.qos.logback:logback-core:${logbackVersion}")
            dependency("com.google.code.findbugs:annotations:${findbugsAnnotationsVersion}")
            dependency("commons-io:commons-io:${commonsIoVersion}")
            dependency("org.apache.commons:commons-lang3:${commonsLangVersion}")
            dependency("org.apache.httpcomponents:httpclient:${httpclientVersion}")
            dependency("org.assertj:assertj-core:${assertjVersion}")
            dependency("org.springframework.security.oauth:spring-security-oauth2:${springSecurityOauth2Version}")
            dependency("org.springframework.security:spring-security-jwt:${springSecurityJwtVersion}")
            dependency("org.springframework.security:spring-security-test:${springSecurityTestVersion}")
        }
    }

    springBoot {
        executable = true
    }

    test {
        testLogging {
            exceptionFormat = 'full'
            showStandardStreams = false
        }

        afterTest { desc, result ->
            println "Executed test ${desc.name} [${desc.className}] with result: ${result.resultType} in ${0.001 * (result.getEndTime() - result.getStartTime())} seconds"
        }
    }

    checkstyle {
        toolVersion = '7.4'
        ignoreFailures = false

        configFile = rootProject.file('config/checkstyle/checkstyle-gradle.xml')
        configProperties = ["suppressionFile": project(':').file('config/checkstyle/suppressions.xml')]
    }

    findbugs {
        ignoreFailures = false
        effort = 'max'
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    pmd {
        ignoreFailures = false
        ruleSets = ['java-basic', 'java-braces', 'java-unnecessary']
    }

    task sourceJar(
            type: Jar,
            group: 'build',
            description: 'Generates a source jar for publishing artifacts.') {
        from sourceSets.main.allJava
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                groupId = project.group
                artifactId = project.name
                version = project.version

                artifact sourceJar {
                    classifier "sources"
                }
            }
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    jar {
        baseName = project.name
        version = rootProject.version
    }

    tasks.withType(JavaCompile) {
        options.incremental = true
    }

    compileJava.dependsOn(processResources)
    test.dependsOn(['checkstyleMain', 'checkstyleTest', 'pmdMain', 'pmdTest', 'findbugsMain', 'findbugsTest'])
}

def publishedProjects = subprojects.findAll()

task jacocoRootReport(type: JacocoReport,
        group: 'coverage',
        description: 'Combines subproject jacoco coverage reports into just one.') {

    dependsOn(publishedProjects.test)

    additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(publishedProjects.sourceSets.main.output)
    executionData = files(publishedProjects.jacocoTestReport.executionData)

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }

    reports {
        html.enabled = true
        xml.enabled = true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/**Application.class'])
        })
    }
}

coveralls {
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${rootProject.buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

task test(group: 'build',
        description: 'Root project test.',
        dependsOn: [tasks.dependencyUpdates, tasks.npmTest])
tasks.test.finalizedBy(tasks.jacocoRootReport)

task check(group: 'build',
        description: 'Root project check.',
        dependsOn: tasks.npmTest)
tasks.check.finalizedBy(tasks.gruntE2E)

task build(group: 'build',
        description: 'Root project build.',
        dependsOn: tasks.test)
build.finalizedBy(tasks.check)

tasks.coveralls.dependsOn(tasks.jacocoRootReport)

task wrapper(type: Wrapper) {
    setGradleVersion(project.gradleVersion)
}