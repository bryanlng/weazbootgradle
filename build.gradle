version = '0.0.1-SNAPSHOT'
group = 'net.weaz'

buildscript {
    ext {
        gradleVersion = '2.14.1'

        springBootVersion = '1.3.6.RELEASE'
        springCloudVersion = 'Brixton.SR4'

        springSecurityJwtVersion = '1.0.5.RELEASE'
        springSecurityTestVersion = '4.1.1.RELEASE'

        nodeVersion = '6.3.1'
        npmVersion = '3.10.6'
        wro4jVersion = '1.7.4'
        assertjVersion = '3.5.2'
        logbackVersion = '1.1.7'
        commonsIoVersion = '2.5'
        commonsLangVersion = '3.4'
        httpclientVersion = '4.5.2'

        springBootDependencyManagementPluginVersion = '0.6.0.RELEASE'
        propdepsPluginVersion = '0.0.7'
        nodePluginVersion = '0.13'
        gruntPluginVersion = '0.13'
        gradleVersionsPluginVersion = '0.13.0'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://repo.spring.io/plugins-release' }
    }

    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:${springBootDependencyManagementPluginVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.springframework.build.gradle:propdeps-plugin:${propdepsPluginVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:${nodePluginVersion}")
        classpath("com.moowork.gradle:gradle-grunt-plugin:${gruntPluginVersion}")
        classpath("com.github.ben-manes:gradle-versions-plugin:${gradleVersionsPluginVersion}")
    }
}

apply plugin: 'com.moowork.node'
apply plugin: 'com.moowork.grunt'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'io.spring.dependency-management'

node {
    version = project.nodeVersion
    npmVersion = project.npmVersion
    distBaseUrl = 'https://nodejs.org/dist'
    download = true
    npmCommand = 'npm --no-color'

    workDir = rootProject.file("./frontend/nodejs")
    nodeModulesDir = rootProject.file("./frontend/")
}

task removeNodeModules(
        type: NpmTask,
        group: 'node',
        description: 'Removes node_modules directory.  Useful on Windows, where path can be quite long.') {
    it.workingDir = rootProject.file("./frontend/")
    args = ['run', 'removeNodeModules']
}

task checkForNPMDependencyUpdates(
        type: NpmTask,
        group: 'node',
        description: 'Checks for new npm dependencies.',
        dependsOn: ['npmInstall']) {
    it.workingDir = rootProject.file("./frontend/")
    args = ['run', 'checkForNPMDependencyUpdates']
}

grunt {
    workDir = rootProject.file("./frontend/")
    colors = false
    bufferOutput = false
}

task gruntBuild(
        type: GruntTask,
        group: 'grunt',
        description: 'Runs the javascript build and generates resources.',
        dependsOn: ['npmInstall']) {
    args = ['build']
}

task gruntEnd2End(
        type: GruntTask,
        group: 'grunt',
        description: 'Runs end2end tests using Protractor and a headless browser.',
        dependsOn: [':server-main:build', ':server-auth:build']) {
    args = ['e2eBuild']
}

task javascriptUnitTest(
        type: GruntTask,
        group: 'grunt',
        description: 'Runs javascript unit tests using Karma and a headless browser.',
        dependsOn: ['npmInstall']) {
    args = ['unitTest']
}

dependencyUpdates {
    revision = 'release'
}

subprojects {
    apply plugin: 'spring-boot'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'

    dependencyManagement {
        imports {
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        }

        dependencies {
            dependency("ch.qos.logback:logback-core:${logbackVersion}")
            dependency("ch.qos.logback:logback-classic:${logbackVersion}")
            dependency("org.assertj:assertj-core:${assertjVersion}")
            dependency("commons-io:commons-io:${commonsIoVersion}")
            dependency("org.apache.commons:commons-lang3:${commonsLangVersion}")
            dependency("org.apache.httpcomponents:httpclient:${httpclientVersion}")
            dependency("org.springframework.security:spring-security-jwt:${springSecurityJwtVersion}")
            dependency("org.springframework.security:spring-security-test:${springSecurityTestVersion}")
        }
    }


    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/libs-release" }
    }

    springBoot {
        executable = true
    }

    test {
        testLogging {
            exceptionFormat = 'full'
        }

        ignoreFailures true

        afterTest { desc, result ->
            println "- ${desc.name}: ${result.resultType}"
        }
    }

    checkstyle {
        configFile = rootProject.file('config/checkstyle/checkstyle-gradle.xml')
        configProperties = ["suppressionFile": project(':').file('config/checkstyle/suppressions.xml')]
    }

    task sourceJar(
            type: Jar,
            group: 'build',
            description: 'Generates a source jar for publishing artifacts.') {
        from sourceSets.main.allJava
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                groupId = project.group
                artifactId = project.name
                version = project.version

                artifact sourceJar {
                    classifier "sources"
                }
            }
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    jar {
        baseName = project.name
        version = rootProject.version
    }

    compileJava.dependsOn processResources
    npmInstall.finalizedBy checkForNPMDependencyUpdates
    check.dependsOn dependencyUpdates
    check.finalizedBy javascriptUnitTest
    check.finalizedBy gruntEnd2End
    jar.dependsOn gruntBuild
}

allprojects {
    task wrapper(type: Wrapper) {
        gradleVersion = project.gradleVersion
    }
}