version = '0.0.1-SNAPSHOT'
group = 'net.weaz'

buildscript {
    ext {
        gradleVersion = '3.0'

        springBootVersion = '1.4.2.RELEASE'
        springCloudVersion = 'Camden.SR2'

        springSecurityJwtVersion = '1.0.6.RELEASE'
        springSecurityTestVersion = '4.2.0.RELEASE'
        springSecurityOauth2Version = '2.0.12.RELEASE'

        nodeVersion = '6.3.1'
        npmVersion = '3.10.6'
        assertjVersion = '3.5.2'
        logbackVersion = '1.1.7'
        commonsIoVersion = '2.5'
        commonsLangVersion = '3.5'
        httpclientVersion = '4.5.2'

        springBootDependencyManagementPluginVersion = '0.6.1.RELEASE'
        propdepsPluginVersion = '0.0.7'
        nodePluginVersion = '0.13'
        gruntPluginVersion = '0.13'
        gradleVersionsPluginVersion = '0.13.0'
        coverallsPluginVersion = '2.7.1'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://repo.spring.io/plugins-release' }
    }

    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:${springBootDependencyManagementPluginVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.springframework.build.gradle:propdeps-plugin:${propdepsPluginVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:${nodePluginVersion}")
        classpath("com.moowork.gradle:gradle-grunt-plugin:${gruntPluginVersion}")
        classpath("com.github.ben-manes:gradle-versions-plugin:${gradleVersionsPluginVersion}")
        classpath("org.kt3k.gradle.plugin:coveralls-gradle-plugin:${coverallsPluginVersion}")
    }
}

apply plugin: 'com.moowork.node'
apply plugin: 'com.moowork.grunt'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.kt3k.coveralls'

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/libs-release" }
    }
}

node {
    version = project.nodeVersion
    npmVersion = project.npmVersion
    distBaseUrl = 'https://nodejs.org/dist'
    download = true
    npmCommand = 'npm --no-color'

    workDir = rootProject.file("${project.buildDir}/nodejs/")
    nodeModulesDir = rootProject.file("${project.projectDir}/frontend/")
}

task removeNodeModules(
        type: NpmTask,
        group: 'node',
        description: 'Removes node_modules directory.  Useful on Windows, where path can be quite long.') {
    it.workingDir = rootProject.file("./frontend/")
    args = ['run', 'removeNodeModules']
}

task checkForNPMDependencyUpdates(
        type: NpmTask,
        group: 'node',
        description: 'Checks for new npm dependencies.',
        dependsOn: ['npmInstall']) {
    it.workingDir = rootProject.file("./frontend/")
    args = ['run', 'checkForNPMDependencyUpdates']
}

grunt {
    workDir = rootProject.file("./frontend/")
    colors = false
    bufferOutput = false
}

task gruntDefault(
        type: GruntTask,
        group: 'grunt',
        description: 'Runs the javascript build and generates resources.',
        dependsOn: ['npmInstall']) {
    args = ['default']
}

task gruntE2E(
        type: GruntTask,
        group: 'grunt',
        description: 'Runs end2end tests using Protractor and a headless browser.',
        dependsOn: ['npmInstall', ':server-main:build', ':server-auth:build']) {
    args = ['e2eBuild']
}

task gruntClean(
        type: GruntTask,
        group: 'grunt',
        description: 'Cleans out the grunt tem',
        dependsOn: ['npmInstall']) {
    args = ['clean']
}

task javascriptUnitTest(
        type: GruntTask,
        group: 'grunt',
        description: 'Runs javascript unit tests using Karma and a headless browser.',
        dependsOn: ['npmInstall']) {
    args = ['unitTest']
}

dependencyUpdates {
    revision = 'release'
    resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'findbugs'
    apply plugin: 'maven-publish'

    dependencyManagement {
        imports {
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        }

        dependencies {
            dependency("ch.qos.logback:logback-core:${logbackVersion}")
            dependency("ch.qos.logback:logback-classic:${logbackVersion}")
            dependency("org.assertj:assertj-core:${assertjVersion}")
            dependency("commons-io:commons-io:${commonsIoVersion}")
            dependency("org.apache.commons:commons-lang3:${commonsLangVersion}")
            dependency("org.apache.httpcomponents:httpclient:${httpclientVersion}")
            dependency("org.springframework.security:spring-security-jwt:${springSecurityJwtVersion}")
            dependency("org.springframework.security:spring-security-test:${springSecurityTestVersion}")
            dependency("org.springframework.security.oauth:spring-security-oauth2:${springSecurityOauth2Version}")
        }
    }

    springBoot {
        executable = true
    }

    test {
        testLogging {
            exceptionFormat = 'full'
            showStandardStreams = false
        }

        afterTest { desc, result ->
            println "Executed test ${desc.name} [${desc.className}] with result: ${result.resultType} in ${0.001 * (result.getEndTime() - result.getStartTime())} seconds"
        }

        outputs.upToDateWhen {
            false
        }
    }

    checkstyle {
        configFile = rootProject.file('config/checkstyle/checkstyle-gradle.xml')
        configProperties = ["suppressionFile": project(':').file('config/checkstyle/suppressions.xml')]
    }

    findbugs {
        ignoreFailures = true
        effort = 'max'
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    pmd {
        ignoreFailures = true
        ruleSets = ['java-basic', 'java-braces', 'java-unnecessary']
    }

    task sourceJar(
            type: Jar,
            group: 'build',
            description: 'Generates a source jar for publishing artifacts.') {
        from sourceSets.main.allJava
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                groupId = project.group
                artifactId = project.name
                version = project.version

                artifact sourceJar {
                    classifier "sources"
                }
            }
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    jar {
        baseName = project.name
        version = rootProject.version
    }

    compileJava.dependsOn processResources
    jar.dependsOn(rootProject.tasks.gruntDefault)
}

def publishedProjects = subprojects.findAll()

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports', dependsOn: subprojects.tasks.test) {
    description = 'Generates an aggregate report from all subprojects'

    additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(publishedProjects.sourceSets.main.output)
    executionData = files(publishedProjects.jacocoTestReport.executionData)

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }

    reports {
        html.enabled = true
        xml.enabled = true
    }
}

coveralls {
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${rootProject.buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}


project.tasks.test.dependsOn(project.tasks.javascriptUnitTest, project.tasks.dependencyUpdates, subprojects.tasks.test)
project.tasks.test.finalizedBy(project.tasks.gruntE2E, project.tasks.jacocoRootReport)

project.tasks.clean.dependsOn(project.tasks.gruntClean)

project.tasks.coveralls.dependsOn(project.tasks.jacocoRootReport)

task unitTests(dependsOn: subprojects.tasks.test)

task wrapper(type: Wrapper) {
    gradleVersion = project.gradleVersion
}
